# 1 Шифратор - дешифратор

# some_words = 'двлффапибрбивуавщгеаеыфбтвопфрща,фыва уфвыфцакззтсаалдбка огатавдаофвчясбиб огнкуадфффффсмаелмсалясфаа'
# final_word = ''
# step = 0
#
#
# while step < len(some_words):
#     if some_words[step] == 'а' or some_words[step] == 'б':
#         final_word += some_words[step + 1]
#         step += 2
#     else:
#         step += 1
#
# print(final_word)

# --------------------------------------------------------------------------------------------------------------------
# 2 Расшифровать фразу fraze (скорее всего -1)

# fraze = 'ОЙЛУП!ОЖ!НПЗЖУ!ТНПУСЖУЭ!Г!ИБГУСБЩОЙК!ЕЖОЭ"'
# final_fraze = ''
# step = 0
#
# while step < len(fraze):
#     final_fraze += chr(ord(fraze[step]) - 1)
#     step += 1
#
# print(final_fraze)

# --------------------------------------------------------------------------------------------------------------------
# 3 Написать программу, которая шифрует введенную пользователем фразу по принципу: код первого символа +1, код второго
#  + 2, код третьего + 3 и так далее до 10, после этого увеличение кода снова на 1, 2, 3. продолжить циклически.
# Вводимые данные брать из другого файла!!

# from JIaBaIII.Practice.Self_Practice.Input_shifr import shifr_from_user
#
#
# def de_shifr_str(some_str):
#     str_new = ''        # Новая строка, в которую будет собираться шифрованная
#     code = 0            # Переменная для прибавления к коду элемента
#     for i in some_str:
#         new_elem_str = ord(i) + (code % 10) + 1  # Получаем код симвала и увеличиваем на 1, 2, 3...10, 1, 2, 3 ..
#         new_elem_str = chr(new_elem_str)  # Преобразовыоваем в символ
#         str_new += new_elem_str  # Добавляем новый символ к строке
#         code += 1
#     return str_new
#
#
# print(de_shifr_str(shifr_from_user()))  # Результат: Удсѓ%хмщочлв#хфлщи5*рѓф%
# #                                         Еще результат: БГЕЗЙЛЈОРТЛНПС%Тзфй*нэод%цзфь


# 3.1  -----  -----  -----  -----  -----  -----  -----  -----  -----  -----  -----  -----  -----  -----  -----  -----
# Программа для расшифровки шифровальщика сверху

# str_shifr = input('Введите строку для расшифровки: ')
# new_str = ''
# code = 0
#
# for i in str_shifr:
#     new_str += chr(ord(i) - (code % 10) - 1)
#     code += 1
#
# print(new_str)

# --------------------------------------------------------------------------------------------------------------------
# 4 Ключи шифрования и дешифровки
# import random
#
# encrypt_key = [3, 6, 4, 2, 1, 5]        # Ключ шифрования
#
# decrypt_key = [5, 4, 1, 3, 6, 2]        # Ключ дешифровки
#
#
# def crypt(string, key):
#     len_key = len(key)
#     start = 0
#     p1 = 0
#     if len(string) % len_key != 0:          # Если остаток от деления длинны строки на длинну ключа != 0
#         #                      В случае истинности выражения можем быть уверены, что длинна ключа и строки не кратны
#         for i in range(len_key - len(string) % len_key):  # Вычисляем сколько символов нужно добавить, что бы строка
#             #                                              стала кратной например строка 14, а ключ 6. Выходит:
#             #                                             6 -14 % 6 = 6 - 2 = 4. Итого 4 символа до кратности 14+4=18
#             string += chr(random.randint(ord('!'), ord('=')))
#
#     len_string = len(string)
#     encrypt_string = ''
#
#     while start + len_key < len_string + 1:  # позиция start - это начало блока из 6-ти символов
#         # Читаем как: пока (стартовая позиция + длина ключа МЕНЬШЕ длины исходной строки + 1)
#         encrypt_string += string[start + key[p1] - 1]  # Добавляем к новой строке символ из исходной строки 'string'
#         # по координатам [start + Номер символа из списка-ключа]
#         p1 += 1
#         if p1 == len_key:
#             p1 = 0
#             start += len_key
#     return encrypt_string
#
#
# string_crypt_1 = crypt('На мели мы налимов лениво ловили, это зашифровано', encrypt_key)
# print('Зашифровано:', string_crypt_1)
#
# string_crypt_2 = crypt(string_crypt_1, decrypt_key)
# print('Расшифровано:', string_crypt_2)

# --------------------------------------------------------------------------------------------------------------------
