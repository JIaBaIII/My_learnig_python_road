# from JIaBaIII.Collor_everything.Colloring import make_txt_bold, make_txt_light_blue, make_txt_italics,\
#     make_txt_underlined
from ftplib import FTP
import emoji

# class MyFirstClass:
#     def __init__(self, f1, f2):
#         self.f1 = f1
#         self.f2 = f2
#
#     def get_f1(self):
#         return self.f1
#
#     def get_f2(self):
#         return self.f2
#
#     def set_f1(self, new_f1):
#         self.f1 = new_f1
#         return new_f1
#
#     def set_f2(self, new_f2):
#         self.f2 = new_f2
#         return new_f2
#
#
# instance_1 = MyFirstClass(4, 5)
# print(instance_1.get_f2())
# print(instance_1.set_f1(244122))
# instance_1.f1 = 9
# print(instance_1.f1)
# #
# print(instance_1.get_f2())
# instance_1.set_f2(14)
# print(instance_1.get_f2())
# instance_1.f2 = 'New line cinema'
# print(instance_1.f2)
# instance_1.f2 = -9
# print(instance_1.f2)
# instance_2 = instance_1.f1 + instance_1.f2
# print(f'{instance_2} - –ö–∞–∫ –≥–æ–≤–æ—Ä–∏–ª –æ–¥–∏–Ω –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π –∫–ª–∞—Å—Å–∏–∫: "–ù—É –Ω–∏—Ö—É—è —Å–µ–±–µ!"')

# class Skeleton:
#
# class Cock:
#     def __init__(self, claw, feathers, cockscomb):
#         self.sk = Skeleton()
#         self.claw = claw
#         self.feathers = feathers
#         self.cockscomb = cockscomb
#         self.wings = [self.sk.wings.add(feather) for feather in feathers]
#
#     def do_wings(self):
#         return self.wings.do_stuff()


# class StaticExampleClass:
#     static_field = 'I\'M STATIC!'
#
#     def __init__(self):
#         self.not_static_field = 'I\'M NOT STATIC!'
#
#     def method_example(self):
#         print(self.static_field)
#         print(self.not_static_field)
#
#
# example = StaticExampleClass()
# example.method_example()
# example_2 = StaticExampleClass()
# StaticExampleClass.static_field = 'NOW YOU SEE?'
# example.not_static_field = 'test1'
# example_2.not_static_field = 'test2'
# example.method_example()
# example_2.method_example()
#
# example_2.static_field = 'SEE???'
# example.method_example()
# example_2.method_example()
#
# StaticExampleClass.static_field = 'JUST MAY BE YOU BLIND'
# example.method_example()
# example_2.method_example()


# @make_txt_underlined
# @make_txt_italics
# @make_txt_bold
# @make_txt_light_blue
# def hello():
#     return "–ö—Ä–∞—Å–∏–≤—ã–π –±–∏—Ä—é–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
#
#
# print(hello())


# class FunctionalList:
#     """–ö–ª–∞—Å—Å-–æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ —Å–ø–∏—Å–∫–æ–º —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–∞–≥–∏–∏: head,
#     tail, init, last, drop, take."""
#
#     def __init__(self, values=None):
#         if values is None:
#             self.values = []
#         else:
#             self.values = values
#
#     def __len__(self):
#         return len(self.values)
#
#     def __getitem__(self, key):
#         # –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ —Ç–∏–ø –∫–ª—é—á–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, list –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
#         return self.values[key]
#
#     def __setitem__(self, key, value):
#         self.values[key] = value
#
#     def __delitem__(self, key):
#         del self.values[key]
#
#     def __iter__(self):
#         return iter(self.values)
#
#     def __reversed__(self):
#         return FunctionalList(reversed(self.values))
#
#     def __call__(self, args):
#         self.append(args)
#
#     def append(self, value):
#         self.values.append(value)
#
#     def head(self):
#         # –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
#         return self.values[0]
#
#     def tail(self):
#         # –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ
#         return self.values[1:]
#
#     def init(self):
#         # –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
#         return self.values[:-1]
#
#     def last(self):
#         # –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
#         return self.values[-1]
#
#     def drop(self, n):
#         # –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫—Ä–æ–º–µ –ø–µ—Ä–≤—ã—Ö n
#         return self.values[n:]
#
#     def take(self, n):
#         # –ø–µ—Ä–≤—ã–µ n —ç–ª–µ–º–µ–Ω—Ç–æ–≤
#         return self.values[:n]
#
#
# some_key = [44, 11, 48, 'sigma']
# fu = FunctionalList(some_key)
# print(fu.head())
# print(fu.tail())
# print(fu.__getitem__(1))
# fu(44)
# print(fu.values)

# class Entity:
#     """–ö–ª–∞—Å—Å, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏. "–í—ã–∑—ã–≤–∞–µ–º—ã–π", —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞."""
#
#     def __init__(self, size, x=None, y=None):
#         self.x, self.y = x, y
#         self.size = size
#         print(self.size, x, y)
#
#     def __call__(self, x, y):                  # –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ __set__(self, x, y) –¢–æ–ª—å–∫–æ call –Ω–µ –Ω–∞–¥–æ –∑–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
#         """–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞."""
#         self.x, self.y = x, y
#         return self.size, self.x, self.y
#
#     # —á–∏–∫...
#
#
# eni = Entity(500, 0, 0.3)
# print(eni(11, 9))
# print(eni('–ö—Ä—É–∂–µ—á–∫–∞', '–Ω–∞ —Å—Ç–æ–ª–µ'))


# class Closer:
#     """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤—ã–∑–æ–≤–æ–º –º–µ—Ç–æ–¥–∞ close
#     –≤ with-–≤—ã—Ä–∞–∂–µ–Ω–∏–∏."""
#
#     def __init__(self, obj):
#         self.obj = obj
#
#     def __enter__(self):
#         return self.obj  # –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É with-–±–ª–æ–∫–∞
#
#     def __exit__(self, exception_type, exception_val, trace):
#         try:
#             self.obj.close()
#
#         except AttributeError:  # —É –æ–±—ä–µ–∫—Ç–∞ –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ close
#             print('Not closable.')
#             return True  # –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ
#
#
# with Closer(FTP('ftp.somesite.com')) as conn:
#     conn.__dir__()
#
# # –≤—ã–≤–æ–¥ –æ–ø—É—â–µ–Ω –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
# print(conn.dir())
#
# –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ AttributeError, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
# with Closer(int(5)) as i:
#     while i < 10:
#         i += 1
#         print(i)


print(emoji.emojize("Omg, its alive! üëçÔ∏è‚ù§Ô∏èüëçÔ∏è"))
print(emoji.emojize("heheeee ‚ù§Ô∏èüëçÔ∏è‚ù§Ô∏è"))
print(emoji.emojize(':Christmas_tree: :OK_hand: :cat: :inbox_tray: :hollow_red_circle: :high_voltage: '
                    ':heart_on_fire: :headphone: :handshake: :fire: :face_with_head-bandage: '
                    ':dotted_six-pointed_star: :black_heart: :anguished_face: :alien: :1st_place_medal:'))
print(emoji.emojize(':Christmas_tree: :OK_hand: :cat: :inbox_tray: :hollow_red_circle: :high_voltage: '
                    ':heart_on_fire: :headphone: :handshake: :fire: :face_with_head-bandage: '
                    ':dotted_six-pointed_star: :black_heart: :anguished_face: :alien: :1st_place_medal:',
                    variant='emoji_type'))


list_of_list = [[True, 5, 1], ['-–≠—Ç–∏ —á–∏—Å–ª–∞ —Ç–∞–∫–∏–µ —á–∏—Å–ª–∞, —á—É–≤–∞–∞–∞–∞–∫!-–î–∞–¥–∞! –ò –Ω–µ –≥–æ–≤–æ—Ä–∏!! –í–µ—á–Ω–æ –Ω–∞—Å —Ç—Ä—É—Å–∞–º–∏ –Ω–∞–∑—ã–≤–∞—é—Ç((']]
list_2 = sum(list_of_list, [])
print(list_2)
print(*list_2)
