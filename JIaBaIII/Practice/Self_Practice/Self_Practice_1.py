# from faker import Faker

# --------------------------------------------------------------------------------------------------------------------

# original = "EXAMPLE"
# removed = original.replace("E", "")
# print(removed)


# --------------------------------------------------------------------------------------------------------------------
# № 4


# def vvesti_pyfxtybt():
#     popitki = 3
#     while popitki != 0:
#         vvod = input('Введите целое число ')
#         if vvod.isnumeric() == int:
#             print('Вы молодец')
#             popitki -= 3
#             return int(vvod)
#         else:
#             popitki -= 1
#             print(f'Это не челое число, попробуйте снова. Попыток осталось -> {popitki}')
#     else:
#         print('Попытки кончились')
#
#
# vvesti_pyfxtybt()


# def func_1(argument1, argument2):
#     return argument1 - argument2
#
#
# def func_2(drugoi_arg1, drugoi_arg2):
#     return drugoi_arg1 + drugoi_arg2
#
#
# print(func_1(func_1(10, 5), func_2(10, 5)))

# class MyFirstClass:
#     def __init__(self, f1, f2):
#         self.f1 = f1
#         self.f2 = f2
#         print(f1, f2)
#
#     def get_f1(self):
#         return self.f1
#
#     def get_f2(self):
#         return self.f2
#
#     def set_f1(self, new_f1):
#         self.f1 = new_f1
#
#     def set_f2(self, new_f2):
#         self.f2 = new_f2
#
#
# mfc = MyFirstClass
# mfc(1, 2)
#
# mfc.get_f1()

# --------------------------------------------------------------------------------------------------------------------
# Экстра задачи:
# Напишите программу, которая выводит состоящий из 20 чисел ряд со следующей закономерностью:
# 8 4 9 3 10 2 11 1 12 0 .....
# for i in range(10):
#     # print(i)
#     print(8 + i, 4 - i, '', end='')

# --------------------------------------------------------------------------------------------------------------------
# 1
# for i in range(20):
#     print('Число 2 в степени', i, 'равно', 2**i)

# --------------------------------------------------------------------------------------------------------------------
# 2  Напишите программу которая спрашивает у пользователя число и выводит остаток от деления этого числа на 2
# Оберните программу циклом так, что бы программа спрашивала у пользователя и выводила результат для 10 чисел


# def samurai_10():
#     for i in range(10):
#         chislo = int(input('Введите число: '))
#         print(f'Остаток от деления этого числа на 2 = {chislo % 10 / 2}')
#
#
# samurai_10()

# --------------------------------------------------------------------------------------------------------------------
# 3 Месяц - погода каждый день
# for i in range(31):
#     vvod_t = int(input('Введите температуру: '))
#     if vvod_t < -273 or vvod_t > 50:
#         print('Ошибка. Диапазон температуры не верен.')
#     elif vvod_t < 0:
#         print('Холодно')
#     elif vvod_t > 0:
#         print('Тепло')
#     else:
#         print('Ноль')

# --------------------------------------------------------------------------------------------------------------------
# 4 штрафы за превышение скорости
# def speeding_fine():
#     agr_speed = int(input('Введите вашу скорость поездки: '))
#     if 0 < agr_speed <= 60:
#         print('Отличная езда! Штрафов нет.', agr_speed, '- км/ч ваша скорость')
#     elif agr_speed > 200:
#         print('Мужик, губу закатай)) Больше 200 км/ч маловероятно на таких дорогах разогнаться')
#     elif agr_speed < 0:
#         print('Мы тут не инвертированные штрафы смотрим, давай ка больше 0)')
#     elif 60 < agr_speed <= 200:
#         print('Штраф ему!!! Штраф, штраф падонку!!', agr_speed, '- км/ч! Лихач чертов!')
#     else:
#         print('Ммм.. Чего стоим, кого ждем?')
#
#
# speeding_fine()

# --------------------------------------------------------------------------------------------------------------------
# 5                                         Счет бюджета
# def check_my_budget():
#     print("""Здравствуйте! Вас приветствует программа по учету бюджета.
# \033[31mДля завершения покупок напишите: хватит\033[0m""")
#     all_money_was = int(input('Введите количество имеющегося на руках бюджета: '))
#     all_money = all_money_was
#     cont_buy = 0
#     while all_money > 0:
#         if 0 < all_money <= 200:
#             print(f'Осторожней с покупками, осталось всего {all_money} тугриков!')
#         else:
#             print(f'Доступно средств: {all_money}')
#
#         buying_staff = input('Ведите сумму Вашей покупки: ')
#
#         if buying_staff == 'хватит':
#             print(f"""Хватит, так хватит) Спасибо за использование нашей программы и приятного дня!
# {'-' * 80}
#     ВЫ совершили покупок: {cont_buy}. На общую стоимость: {all_money_was - all_money}.
#     Остаток средств составляет: {all_money}.
# {'-' * 80}""")
#             break
#         elif 0 < int(buying_staff) <= all_money:
#             all_money -= int(buying_staff)
#             cont_buy += 1
#             print(f'Неплохая покупка!')
#         elif int(buying_staff) > all_money:
#             print('Хозяин... Казна не резиновая, умерьте свои аппетиты)')
#         elif int(buying_staff) < 0:
#             print(f"""ЭЭэмм, простите, не расслышал.. Между прочим я уважаемая, в узких кругах, программа!
# Со мной такой трюк не пройдёт!
# Погодите.... Вам еще и за покупки приплачивать могут, получается?!
# Не в мою смену!!!""")
#         else:
#             print("""Зачем вы используете программу для посчета басплатных дармов?...
# Просто риторический вопрос, продолжайте покупки^^""")
#         print('-' * 40)
#     else:
#         print(f"""Вы потратили весь свой бюджет без остатка. Надеюсь покупки вам понравились))
# {'-' * 80}
# Количество покупок было сделано: {cont_buy}, при начальном бюджете: {all_money_was}.
# {'-' * 80}
# Спасибо за использование нашей программы. Хорошего дня!
# {'-' * 80}""")
#
#
# check_my_budget()

# --------------------------------------------------------------------------------------------------------------------
# 6                                         Находит наибольшее число x
# x = 4327612
# m = 0
# while x > 0:
#     if (x % 10) > m:
#         m = (x % 10)
#     x //= 10
#     print(x, m)
# print(m)

# --------------------------------------------------------------------------------------------------------------------
# 7                                     номер дня недели = какой это день

# def what_day_of_a_week(arg1):
#     if arg1 > 7:
#         simple_day = int(arg1 % 7)
#     else:
#         simple_day = int(arg1)
#     if simple_day == 7:
#         print('Воскресенье')
#     elif simple_day == 6:
#         print('Суббота')
#     elif simple_day == 5:
#         print('Пятница')
#     elif simple_day == 4:
#         print('Четверг')
#     elif simple_day == 3:
#         print('Среда')
#     elif simple_day == 2:
#         print('Вторник')
#     elif simple_day == 1:
#         print('Понедельник')
#     else:
#         print('Нет такого дня недели!!')
#
#
# what_day_of_a_week(10)   # Вариант через if

# def find_what_day(arg2):
#     some_week = ['Это Понедельник', 'А это Вторник', 'Тут Среда', 'Похож на тверк - Четверг ',
#                  ' Тусссиииим, Пятница!', 'Суббота - блевота..', 'Воскресенье...Завтра на работу..']
#
#     if arg2 > 7:
#         my_day = int(arg2 % 7) - 1
#         print(f'Вангую я, что твоя цифра {arg2} - {some_week[my_day]}!!!! ')
#     elif 1 <= arg2 <= 7:
#         my_day = int(arg2) - 1
#         print(f'Вангую я, что твоя цифра {arg2} - {some_week[my_day]}!!!! ')
#     else:
#         print('Нет такого дня недели')
#
#
# find_what_day(64242)  #Вариант через список

# --------------------------------------------------------------------------------------------------------------------
# 8                                     Список[5][9] из случаянных значений 10-99
#
# r_list = []
#
# n_str = 5
# s_stolb = 9
#
# for i in range(n_str):
#     r_list.append([])
#     for j in range(s_stolb):
#         r_list[i].append(random.randint(10, 99))
#
# print_list_2d(r_list)

# --------------------------------------------------------------------------------------------------------------------
# 9                                     В задаче 8 найти максимальный и минимальный элемент
# slice_r_list = []
# max = 0
# min = 100
# for i in range(len(r_list)):
#     slice_some = r_list[i]
#     for j in slice_some:
#         if j > max:
#             max = j
#         if j < min:
#             min = j
#
# slice_r_list.append(f'Масксимальное число в рандомном листе = {max}')
# slice_r_list.append(f'Минимальное число в рандомном листе = {min}')
#
# print(slice_r_list[0])
# print(slice_r_list[1])

# --------------------------------------------------------------------------------------------------------------------
# 10                                       Количество работников и их з\п
#                                                                           (переделать покороче!!)
# import random
# from JIaBaIII.Practice.Self_Practice.list_2D_practice import print_list_2d
#
# list_of_all_z_p = []
# rab_str = 70
# month_stolb = 12
#
#
# for i in range(rab_str):
#     list_of_all_z_p.append([])
#     for j in range(month_stolb):
#         list_of_all_z_p[i].append(random.randint(20000, 150000))
#
# #  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# #  Средняя з\п по всему заводу
#
#
# def find_major(list):
#     summa = 0
#     for i in range(len(list)):
#         for j in range(len(list[i])):
#             summa += list[i][j]
#
#     summa //= 70
#     print(f'Общая з/п по заводу: {summa}')
#
# #  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Средняя з\п каждого работкника + кто получает больше среднего по заводу
#     list_of_majors = []
#     count_of_majors = 0
#     for i in range(len(list)):
#         privat_summa = 0
#         for j in range(len(list[i])):
#             privat_summa += list[i][j]
#             if j == 11:
#                 midl_summa = privat_summa
#                 if midl_summa > summa:
#                     count_of_majors += 1
#                     list_of_majors.append([f'Гандон № [{i + 1}], '
#                                            f'его з/п : {midl_summa}'])
#     print(f'Каждый из сучьев, мажоров!! : ')
#     for i in range(len(list_of_majors)):
#         print(*list_of_majors[i])
#     print(f'Число мажоров = {count_of_majors}')
#
#
# find_major(list_of_all_z_p)

# --------------------------------------------------------------------------------------------------------------------
# 11  Тяжкоя задачка на вычислить сколько выйгрышных билетов, которые имеет 8-значный номер, если критерии, что
# выйгравшим билетом считается тот, у которого сумма первых 4 цифр кратна сумме последних четырех
# например №55555000, сумма первых 4 : 5+5+5+5+5=20, последних : 0+0+0+5=5. Выирышный билет!
# последние 0000 не считать, потому что делить на 0 нельзя)
#                                                                Ее можно сократить, но пока хз как((
#                                                               В смысле сократить количество операций процессора

# iter = 0
# count = 0
# for q in range(10):
#     for w in range(10):
#         for e in range(10):
#             for r in range(10):
#                 sum_1 = q + w + e + r
#                 for a in range(10):
#                     for s in range(10):
#                         for d in range(10):
#                             for f in range(10):
#                                 sum_2 = a + s + d + f
#                                 iter += 1
#                                 if sum_2:  # Чувствую,что этот if sum_2 важный, если там ноль - False
#                                     if sum_1 % sum_2 == 0:                    #  что угодно кроме нуля - True
#                                         count += 1
# print(f'Всего {count} чисел, где сумма первых четырех цифр кратная сумме последних четырех ')
# print(iter)

#                           Здесь результат равен: 6.714.438
#                           А всего вариаентов: 99.990.000
# #  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Попробуем сократить...

#  Тут надо придумать формулу, что бы например, если сумма_1, например будет равна 13, то сумма_2 берем всегда 1 - ок,
# дальше смотрим делится ли на на 2 нацело, если нет, то смотрим вплоть до 13. Выходит у нас в сумме_2 нужна сумма == 1
# или 13, все остальные варианты можно не просматривать[1 - это 1000, 0100, 0010, 0001 (>>> всего 4 варианта <<<)....
# А 13 - это 9400, 0940, 0094, 4900, 0490, 0049, 8500, 0850, 0085, 5800, 0580, 0058, 7600, 0760, 0076, 6700, 0670, 0067,
# и еще 9040, 9004, 0904, 4090, 4009, 0409, 8050, 8005, 0805, 5080, 5008, 0508, 7060, 7006, 0706, 6070, 6007, 0607
# Ииии еще когда 3 числа дают 13, а когда 4 числа дают 13..... короч задобаюсь считать...

# По такому принципу надо построить:
# в голове у меня выстроилась такая идея: по сути нам надо будет просчитать только с 0 до 9999 (это первые 4 цифры),
# а по сумме_1 формулой смотреть сколько вариаций кратности можно придумать имеяя в распоряжении от 1 до 4 чисел
# в 4 возможных положениях.

# первые пометки, если sum_1 можно разложить только на 1 цифру, то вариантов ->>> 4, если на 2 разных ->>> 12 вариантов
# 2 одинаковых ->>> 6 вариантов + Если каждое число раскладывается на на слогаемые..Зато есть паттерн...хммм...
# а что если....

# Нашел! Этот раздел высшей математики называется "комбинаторика", ебал я её в рот, никогда не думал, что скажу это, но
# похоже пора учить мат часть=DDD ну или хотя бы понять по какому принципу формула строится.....
from itertools import *
from JIaBaIII.DZshki.DZ_dop_1 import find_factorial

# find_factorial(3)


# count = 0
# for q in range(4):
#     for w in range(4):
#         for e in range(4):
#             for r in range(4):
#                 sum_1 = q + w + e + r
#                 for a in range(4):
#                     for s in range(4):
#                         for d in range(4):
#                             for f in range(4):
#                                 sum_2 = a + s + d + f
#                                 if sum_2:  # Чувствую,что этот if sum_2 важный, если там ноль - False
#                                     if sum_1 % sum_2 == 0:                    #  что угодно кроме нуля - True
#                                         count += 1
# print(f'Всего {count} чисел, где сумма первых четырех цифр кратная сумме последних четырех ')

# #  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# #  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#                                 Надо этот вариант добить, может получится лучше


# def check_v2(arg_num):
#     counts = 0
#     while len(arg_num) < 4:
#         arg_num += '0'
#     for i in set(permutations(arg_num, 4)):
#         counts += 1
#     return counts
#
#
# count_v2 = 0
# for q in range(10):
#     for w in range(10):
#         for e in range(10):
#             for r in range(10):
#                 sum_1 = f'{q}{w}{e}{r}'
#                 sum_1_1 = q + w + e + r
#                 if sum_1_1:
#                     for n in range(1, int(sum_1) + 1):
#                         summa_01 = n
#                         listed_n = list(str(n))
#                         if len(listed_n) > 1:
#                             summa_01 = sum([int(digit) for digit in listed_n])
#                         if sum_1_1 % summa_01 == 0:
#                             # count_v2 += check_v2(f'{n}')
#                             count_v2 += 1
#                 else:
#                     count_v2 += 10000
# print(f'Всего {count_v2} чисел, где сумма первых четырех цифр кратная сумме последних четырех ')
# #  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# #  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# сумма чисел.....
# n = list(str(33))
# n = [int(digit) for digit in n]
# print(n)
#
# suma = sum(n)
#
# print("Сумма:", suma)
# #  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# #  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


# multiples_5 = [n for n in range(1, 101) if n % 5 == 0]
# print(multiples_5)

# count_v2 = 0
# for q in range(10):
#     for w in range(10):
#         for e in range(10):
#             for r in range(10):
#                 sum_1 = f'{q}{w}{e}{r}'
#                 sum_1_1 = q + w + e + r
#                 if sum_1_1:
#                     count_v2 += check_v2(sum_1)
#                     for n in range(1, int(sum_1)):
#                         if sum_1_1 % n == 0:
#                             count_v2 += check_v2('n')
#                 else:
#                     count_v2 += 10000
# print(f'Всего {count_v2} чисел, где сумма первых четырех цифр кратная сумме последних четырех ')


# for q in range(10):
#     for w in range(10):
#         for e in range(10):
#             for r in range(10):
#                 for i in set(permutations(f'{q}{w}{e}{r}', 4)):
#                     count += 1
#                     print(i, end='')
#                     print(' - ', count)


# #  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# conut = 0
# for i in range(10000):
#     summa_st = sum(map(int, str(i)))
#     for j in range(1, i + 1):
#         conut += 1
#         summa_end = sum(map(int, str(j)))
#         if summa_st % summa_end == 0:
#             conut += 1
#             print(f'Победитель: {i} - {j}')                 # Хард решение. Неверное
# print(conut)                                                # Ответ : Выйгрышных билетов = 4.014.585
#                                                           Всего билетов : 49.995.000

# --------------------------------------------------------------------------------------------------------------------
# 12                                       интересно получится ли прогресс-бар
# import random
# import time
#
#
# def downloading():
#     colors_of = ["\033[1m\033[3m\033[31m",
#                  "\033[1m\033[3m\033[32m",
#                  "\033[1m\033[3m\033[33m",
#                  "\033[1m\033[3m\033[34m",
#                  "\033[1m\033[3m\033[35m",
#                  "\033[1m\033[3m\033[36m"]
#
#     ra_coloring = random.randint(0, len(colors_of) - 1)
#     for i in range(101):
#         if i % 20 == 0:
#             ra_coloring = random.randint(0, len(colors_of) - 1)
#         # hehe = 'Downloading trojan on your pc. Please wait'
#         # if i % 10 == 0:
#         #     hehe += ' .'
#         my_sting = f'progress : {i}%'
#         time.sleep(0.23)
#         # print("\r{}".format(hehe), end='')
#         print(colors_of[ra_coloring] + '\r{}'.format(my_sting), end='')
#
#
# downloading()

# --------------------------------------------------------------------------------------------------------------------
# 13                                                  А часы?))))
#                                             Внутриконсольный секундомер
# import time
#
#
# def gimmi_time():
#     for hour in range(24):
#         for min in range(60):
#             for sec in range(60):
#                 my_sting = f"{hour} часов {min} минут {sec} секунд"
#                 print('\r{}'.format(my_sting), end='')
#                 time.sleep(1)
#
#
# gimmi_time()

# --------------------------------------------------------------------------------------------------------------------
# 14        внутрикансольные часы, которые будут показываать тебе реальное время, если введешь часы и минуты.
# import random
#
#
# def gimmi_correct_time(arg1=int(input('Сколько сейчас часов: ')), arg2=int(input('Сколько сейчас минут: '))):
#     colors_of = ["\033[1m\033[3m\033[31m",
#                  "\033[1m\033[3m\033[32m",
#                  "\033[1m\033[3m\033[33m",
#                  "\033[1m\033[3m\033[34m",
#                  "\033[1m\033[3m\033[35m",
#                  "\033[1m\033[3m\033[36m"]
#     while True:
#         for hour in range(24 - arg1):
#             for min in range(60 - arg2):
#                 ra_coloring = random.randint(0, len(colors_of) - 1)
#                 for sec in range(60):
#                     my_sting = f"{arg1 + hour}:{arg2 + min}:{sec}"
#                     print(colors_of[ra_coloring] + '\r{}'.format(my_sting), end='')
#                     time.sleep(1)
#                     if (min + arg2) == 59 and (hour + arg1) == 23 and sec == 59:
#                         arg1, arg2 = 0, 0
#
#
# gimmi_correct_time()

# --------------------------------------------------------------------------------------------------------------------
# 15                                 Или можно просто не изобретать велосипед...))

# from tqdm import tqdm
#
# for i in tqdm(range(9000000)):
#     pass


# --------------------------------------------------------------------------------------------------------------------
# 16
#  import time

# stroka = '     Ебануться, я бегууу!!'  # Ахренеть, бегущая строка вышла)))
# while True:
#     for i in range(27):
#         time.sleep(0.3)  # Дает задержку,что бы мы увидели замещение в принте
#         print("\r{}".format(stroka[i:i + 6]), end='')

# --------------------------------------------------------------------------------------------------------------------
# 16.1
#                                        более цивильная версия))

# import time
# stroka = '     Привет.. Один здесь?)))'  # Бежит? Куда бежит? Сударь, да вы бредите!
# while True:
#     for i in range(29):
#         time.sleep(0.3)  # Дает задержку,что бы мы увидели замещение в принте
#         print("\r{}".format(stroka[i:i + 6]), end='')

# --------------------------------------------------------------------------------------------------------------------
# Задачка, которую сам себе придумал) про сколько лет и часов спит человек за всю свою жизнь
# import emoji
#
#
# def sleep_smile_amount():
#     years = int(input('Введите сколько вам полных лет: '))
#     print('-' * 75)
#     smile_amount = (years * 365) * 10
#     years_to_hours = years * 365 * 24
#     hours_of_sleep = years_to_hours // 3
#     years_of_sleep = years // 3
#     print(f'За всю вашу жизнь, кстати, равной в часах ➡ \033[32m\033[3m{years_to_hours}\033[0m,'
#           f'\nвы спали всего \033[1m\033[35m{years_of_sleep}\033[0m годков, или, если в месяцах, то ➡ '
#           f'\033[35m\033[3m{years * 12}\033[0m'
#           f'\nчто составляет \033[35m\033[3m{hours_of_sleep}\033[0m часов от всей вашей жизни =))')
#     print('-' * 75)
#     print(emoji.emojize(f'Ну не грустите вы так! Подумаешь, треть жизни во сне ;)'
#                         f'\nЗато за всю жизнь вы смеялись примерно ➡ \033[33m{smile_amount * 10}\033[0m ⬅ раз,'
#                         f'\nчто, вобщем-то, весьма не мало, согласны?)))'
#                         f'\nНо никогда не поздно посмеяться еще, ну или еще чутка вздремнуть)) ❤️'))
#
#
# sleep_smile_amount()
