# 1. Напишите функцию Python, чтобы найти максимум трех чисел.


# --------------------------------------------------------------------------------------------------------------------
# 2. Напишите функцию Python для суммирования всех чисел в списке
# Список образцов : (8, 2, 3, 0, 7)
# Ожидаемый результат : 20

# def summ_all(*args):
#     outomata = 0
#     for some_args in args:
#         outomata += some_args
#     return print(outomata)
#
#
# summ_all(8, 2, 3, 0, 7)

# --------------------------------------------------------------------------------------------------------------------
# 3. Напишите функцию Python для умножения всех чисел в списке.
# Список образцов : (8, 2, 3, -1, 7)
# Ожидаемый результат : -336

# def multiply_all(*args):
#     outomata = 1
#     for some_args in args:
#         outomata *= some_args
#     return print(outomata)
#
#
# multiply_all(8, 2, 3, -1, 7)

# --------------------------------------------------------------------------------------------------------------------
# 4. Напишите программу на Python для обращения строки.
# Пример строки : «1234abcd»
# Ожидаемый результат : "dcba4321"

# def reverse_str(args):
#     return print(args[::-1])
#
#
# reverse_str('Строку переверни, пёс')

# --------------------------------------------------------------------------------------------------------------------
# 5. Напишите функцию Python для вычисления факториала числа (неотрицательное целое число).
# Функция принимает число в качестве аргумента.

def find_factorial(some_munb):
    rest = 1
    for i in range(1, some_munb + 1):
        rest *= i
    print(rest)
    return int(rest)
#
#
# find_factorial(52)

# --------------------------------------------------------------------------------------------------------------------
# 6. Напишите функцию Python, чтобы проверить, находится ли число в заданном диапазоне.

# def find_in_range(arg1):
#     if arg1 in range(-80, 3):
#         print('Попал!')
#     else:
#         print('Промахнулся')
#
#
# find_in_range(4)

# --------------------------------------------------------------------------------------------------------------------
# 7. Напишите функцию Python, которая принимает строку и рассчитывает количество букв верхнего и нижнего регистра.
# Пример строки : «Быстрая Лиса Бровей»
# Ожидаемый результат :
# Количество символов в верхнем регистре: 3
# Количество строчных букв: 12

# def count_upper_and_lower(stroka):
#     small_bukva = 0
#     big_bukva = 0
#     for letter in stroka:
#         if letter.isupper():
#             big_bukva += 1
#         if letter.islower():
#             small_bukva += 1
#     print(f"Букв нижнего регистра -> {small_bukva}")
#     print(f"Букв верхнего регистра -> {big_bukva}")
#
#
# count_upper_and_lower('Быстрая Лиса Бровей')

# --------------------------------------------------------------------------------------------------------------------
# 8. Напишите функцию Python, которая берет список и возвращает новый список с уникальными элементами первого списка.
# Список образцов: [1,2,3,3,3,3,4,5]
# Уникальный список: [1, 2, 3, 4, 5]

# def make_set_list(*some_list):
#     print(set(some_list))
#
#
# make_set_list(1, 2, 2, 2, 3, 8, 11, 8, 7)

# --------------------------------------------------------------------------------------------------------------------
# 9. Напишите функцию Python, которая принимает число в качестве параметра и проверяет, является ли
# число простым или нет. Примечание. Простое число (или простое число) - это натуральное число, большее 1,
# которое не имеет положительных делителей, кроме 1 и самого себя.

# def check_for_simple_chislo(agr1):
#     deli = 2
#     while agr1 % deli != 0:
#         deli += 1
#     return deli == agr1
#
#
# print(check_for_simple_chislo(2703))

# --------------------------------------------------------------------------------------------------------------------
# 10. Напишите программу на Python для печати четных чисел из заданного списка.
# Список образцов : [1, 2, 3, 4, 5, 6, 7, 8, 9]
# Ожидаемый результат : [2, 4, 6, 8]

# def onli_chet_print(*args):
#     new_chet_spisok = []
#     for elem in args:
#         if elem % 2 == 0:
#             new_chet_spisok.append(elem)
#     print(new_chet_spisok)
#
#
# onli_chet_print(1, 2, 3, 4, 5, 666)

# --------------------------------------------------------------------------------------------------------------------
# 11. Напишите функцию Python, чтобы проверить, является ли число совершенным или нет.
# Согласно Википедии: в теории чисел совершенное число - это положительное целое число, равное сумме его собственных
# положительных делителей, то есть сумме его положительных делителей, исключая само число
# (также известное как его аликвотная сумма). Эквивалентно, идеальное число - это число, которое составляет
# половину суммы всех его положительных делителей (включая себя).
# Пример : первое совершенное число равно 6, потому что 1, 2 и 3 являются его собственными положительными делителями,
# а 1 + 2 + 3 = 6. Эквивалентно, число 6 равно половине суммы всех его положительных делителей: (1 + 2 + 3 + 6) / 2 = 6.
# Следующее совершенное число - 28 = 1 + 2 + 4 + 7 + 14. За ним следуют совершенные числа 496 и 8128.

# def find_perfect_num():
#     number = int(input('Введите число '))
#     summ = 0
#     for i in range(1, number):
#         if number % i == 0:
#             summ += i
#     if summ == number:
#         print(f'{number} <- Это число, суко, идеальное!')
#     else:
#         print(f'{number} <- Это стрёмное, тупое, вообще неидеальное число...')
#
#
# find_perfect_num()

# --------------------------------------------------------------------------------------------------------------------
# 12. Напишите функцию Python, которая проверяет, является ли переданная строка палиндромом или нет.
# Примечание. Палиндром - это слово, фраза или последовательность, которые читаются так же, как и вперёд, например,
# бегут мадам или медсестры.


# def look_for_palidrom(arg1):
#     my_new_list = list(arg1)
#     list_to_append = []
#     for elem in my_new_list:
#         if elem != ' ':
#             list_to_append.append(elem)
#     reversed_list = list_to_append[::-1]
#     if list_to_append == reversed_list:
#         print('Андрюха у нас ПАЛИНДРОМ! Возможно криминал. По коням!')
#     else:
#         print('Не палиндром')
#
#
# look_for_palidrom('лёша н         а 38    3 по    лке     к   л   оп3          8      3а на         шё     л')


# --------------------------------------------------------------------------------------------------------------------
# 13. Напишите функцию Python, которая печатает первые n строк треугольника Паскаля.
# Примечание. Треугольник Паскаля - это арифметическая и геометрическая фигура, впервые представленная Блезом Паскалем.
# Каждое число - это два числа над ним, сложенные вместе.

# Задача какая-то meh..

# --------------------------------------------------------------------------------------------------------------------
# 14. Напишите функцию Python, чтобы проверить, является ли строка панграммой или нет.
# Примечание. Панограммы - это слова или предложения, содержащие каждую букву алфавита хотя бы один раз.
# Например: «Быстрая коричневая лиса перепрыгивает через ленивую собаку»

# def find_panogram(arg1):
#    some = sorted(list(arg1))
#    xxx = sorted(set(some))
#    peremi = 0
#    for i in xxx:
#       peremi += 1
#       print(peremi)
#    if peremi >= 26:
#       print('Это предложение панограмм')
#    else:
#       print('Это предложение НЕ панограмм')
#
#
# find_panogram('the quick brown fox jumps over the lazy dog')

# --------------------------------------------------------------------------------------------------------------------
# 15. Напишите программу на языке Python, которая принимает в качестве входных данных последовательность слов,
# разделенных дефисами, и печатает слова в последовательности, разделенной дефисами, после сортировки по алфавиту.
# Образцы элементов : зеленый-красный-желтый-черный-белый
# Ожидаемый результат : черный-зеленый-красный-бело-желтый

# def sort_words(args):
#     new_list = args.split('-')
#     new_mew_list = '-'.join(sorted(new_list))
#     print(new_mew_list)
#
#
# sort_words('black-white-yellow-purple-green')

# --------------------------------------------------------------------------------------------------------------------
# 16. Напишите функцию Python, чтобы создать и распечатать список, значения которого представляют собой квадрат чисел
# от 1 до 30 (оба включены).

# def print_squire_1_30():
#     my_list1 = []
#     for i in range(1, 31):
#         my_list1.append(i*i)
#     print(my_list1)
#
#
# print_squire_1_30()

# --------------------------------------------------------------------------------------------------------------------
# 17. Напишите программу на Python, чтобы создать в Python цепочку декораторов функций
# (полужирный, курсив, подчеркивание и т. Д.).

# def make_txt_fat(func):
#     def returning():
#         return "\033[1m" + func() + "\033[0m"
#     return returning()
#
#
# def make_txt_kurva(func):
#     def returning():
#         return "\033[3m" + func() + "\033[0m"
#     return returning()
#
#
# def make_txt_underlined(func):
#     def returning():
#         return "\033[4m" + func() + "\033[0m"
#     return returning()
#
#
# # @make_txt_underlined
# # @make_txt_fat
# # @make_txt_kurva
# def hello():
#     vvod = input()
#     return vvod
#
#
# print(hello)          # Ну хз там всё вместе не выходит задекорировать

# --------------------------------------------------------------------------------------------------------------------
# 18. Напишите программу на Python для выполнения строки, содержащей код Python.

# some_code = """
# def mutiply(x,y):
#     return x*y
# print('Multiply of 10 and -800 is: ',mutiply(10,-800))
# """
# exec(some_code)  # ???????

# --------------------------------------------------------------------------------------------------------------------
# 19. Напишите программу на Python для доступа к функции внутри функции.

# def func_01(arg1):
#     def func_02(arg2):
#         nonlocal arg1
#         arg1 *= 9
#         return arg1 + arg2
#     return func_02
#
#
# for_arg2 = func_01(11)
# print(for_arg2(1))

# --------------------------------------------------------------------------------------------------------------------
# 20. Напишите программу на Python для определения количества локальных переменных, объявленных в функции.

# def make_smthng_sparkle():
#     sparkle_01 = 'Lllliiibeeeee - liiiiiiiiiiibeeeee,'
#     sparkle_02 = sparkle_01 + ' amoooore -amoooooooooooooreeeee,'
#     sparkle_03 = sparkle_02 + ' lliiiiiiiibeeeee - liiiibe, пиздец'
#     print(sparkle_03)
#
#
# make_smthng_sparkle()
# print(f'Локальных переменных внутри функции -> {make_smthng_sparkle.__code__.co_nlocals}')
