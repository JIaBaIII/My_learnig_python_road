# 1 Написать класс, имеющий статические и нестатические поля. А также гет методы, возвращающие не статические поля
# класса (для каждого поля свой)

# class SomeInterestingClass:
#     static_field_01 = 42
#     static_field_02 = '- Ответ на главный вопрос жизни, пространства и всего'
#
#     def __init__(self, n1, n2):
#         self.not_static_field_1 = n1
#         self.not_static_field_at_all = n2
#
#     def get_n1(self):
#         return self.not_static_field_1
#
#     def get_n2(self):
#         return self.not_static_field_at_all
#
#     def set_n1(self, new_n1):
#         self.not_static_field_1 = new_n1
#
#     def set_n2(self, new_n2):
#         self.not_static_field_at_all = new_n2
#
#
# sic = SomeInterestingClass(4, 2)
# print(sic.static_field_01, sic.static_field_02)
# print((sic.get_n1() * sic.get_n2()) // 10)
# sic.set_n1('-Можно Машку')
# sic.set_n2('За ляшку!')
# print(f'Можна? {sic.get_n1()} {sic.get_n2()}')

# --------------------------------------------------------------------------------------------------------------------
# 2 Дан класс Pupil
# Добавьте метод, который позволит ученику забыть какую то часть знаний (не все сразу).

class Pupil:
    def __init__(self):
        self.knowledge = []

    def take(self, info):
        self.knowledge.append(info)

    def forget_some(self, i_want_to_forget):
        self.knowledge.remove(i_want_to_forget)


pup = Pupil
somelist = [123, 11, 44]


# --------------------------------------------------------------------------------------------------------------------
# 3 Дан класс Кошка. Кошка имеет вес, имя и пол. Переопределить магический метод __add__() таким образом, чтобы при
# сложении двух кошек (и только кошек!), в случае если они противоположного пола получалась новая кошка, имеющая
# половину от среднего веса родителей и имя, состоящее из имен родителей. Пол должен выбираться в зависимости от левого
# аргумента сложения.
# При попытке сложить двух однополых кошек, в консоль должно выводиться сообщение о неприемлимости навязывания
# гомосексуализма котятам и возвращаться None.

# class Cat:
#     def __init__(self):
#


# --------------------------------------------------------------------------------------------------------------------
# 4 Написать программу, которая будет сравнивать произвольное количество кошек и сортировать их в порядке возрастания
# по параметру вес. Эффективность - поебать, но чем больше тем лучше.


# --------------------------------------------------------------------------------------------------------------------
# 5  Hard Mode. Задачу нагло спиздил, если честно, но она клевая.
# Напишите программу по следующему описанию. Есть класс "Warrior". От него создаются два экземпляра-юнита.
# Каждому устанавливается здоровье в 100 очков. В случайном порядке они бьют друг друга. Тот, кто бьет, здоровья
# не теряет. У того, кого бьют, оно уменьшается на 20 очков от одного удара. После каждого удара надо выводить
# сообщение, какой юнит атаковал, и сколько у противника осталось здоровья. Как только у кого-то заканчивается ресурс
# здоровья, программа завершается сообщением о том, кто одержал победу.
